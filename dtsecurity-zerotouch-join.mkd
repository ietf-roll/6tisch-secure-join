---
title: 6tisch Zero-Touch Secure Join protocol
# abbrev: 6tisch-Secure-Join
docname: draft-ietf-6tisch-dtsecurity-zerotouch-join-02

# stand_alone: true

ipr: trust200902
area: Internet
wg: 6tisch Working Group
kw: Internet-Draft
cat: info

coding: us-ascii
pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:
      -
        ins: M. Richardson
        name: Michael Richardson
        org: Sandelman Software Works
        email: mcr+ietf@sandelman.ca

      -
        ins: B. Damm
        name: Benjamin Damm
        org: Silver Spring Networks
        email: bdamm@ssni.com


normative:
  RFC2119:
  I-D.ietf-6lo-privacy-considerations:
  RFC7030:
  RFC7228:
  RFC7250:
  I-D.ietf-anima-bootstrapping-keyinfra:
  I-D.ietf-6tisch-minimal:
  I-D.ietf-anima-grasp:
  I-D.ietf-6tisch-minimal-security:
  I-D.richardson-anima-6join-discovery:
  I-D.richardson-6tisch-minimal-rekey:
  I-D.ietf-core-object-security:
  I-D.ietf-6tisch-terminology:
  I-D.ietf-netconf-keystore:
  I-D.ietf-core-comi:
  I-D.ietf-ace-cbor-web-token:
  I-D.vanderstok-ace-coap-est:
  I-D.ietf-core-yang-cbor:
  iec62591:
    target: "https://webstore.iec.ch/publication/24433"
    title: "62591:2016 Industrial networks - Wireless communication network and communication profiles - WirelessHART"
    author:
      ins: "IEC"
    date: 2016

  ieee802-1AR:
    target: "http://standards.ieee.org/findstds/standard/802.1AR-2009.html"
    title: "IEEE 802.1AR Secure Device Identifier"
    author:
      ins: "IEEE Standard"
    date: 2009
  ieee802159:
    target: "http://standards.ieee.org/findstds/standard/802.15.9-2016.html"
    title: "802.15.9-2016 - IEEE Approved Draft Recommended Practice for Transport of Key Management Protocol (KMP) Datagrams"
    author:
      ins: "IEEE Standard"
    date: 2016
  ieee802154:
    target: "http://standards.ieee.org/findstds/standard/802.15.4-2015.html"
    title: "802.15.4-2015 - IEEE Standard for Low-Rate Wireless Personal Area Networks (WPANs)"
    author:
      ins: "IEEE Standard"
    date: 2015
  cullenCiscoPhoneDeploy:
    target: "http://www.lix.polytechnique.fr/hipercom/SmartObjectSecurity/papers/CullenJennings.pdf"
    title: "Transitive Trust Enrollment for Constrained Devices"
    author:
      ins: "C. Jennings"
      org: Cisco
    date: 2012
  RFC7217:
  I-D.richardson-6tisch-join-enhanced-beacon:
  RFC6775:
  RFC7252:
  I-D.selander-ace-cose-ecdhe:

informative:
  RFC4655:
  RFC7554:
  RFC4191:
  RFC5056:
  RFC7641:
  RFC7731:
  I-D.ietf-roll-useofrplinfo:
  I-D.ietf-ace-actors:
  I-D.ietf-core-sid:
  ISA100:
    target:  "http://www.isa100wci.org/Documents/PDF/The-Technology-Behind-ISA100-11a-v-3_pptx"
    title: "The Technology Behind the ISA100.11a Standard "
    date: 2010-06-15
  PFS:
    title: "Forward Secrecy"
    target: "https://en.wikipedia.org/w/index.php?title=Forward_secrecy&oldid=731318899"
    author:
      -
        name: Wikipedia
    date: 2016-08-01

  pledge-word:
    title: "Dictionary.com Unabridged"
    target: "http://dictionary.reference.com/browse/pledge"
    author:
      -
        name: Dictionary.com
    date: 2015

  duckling:
    title: "The resurrecting duckling: security issues for ad-hoc wireless networks"
    target: "https://www.cl.cam.ac.uk/~fms27/papers/1999-StajanoAnd-duckling.pdf"
    author:
      -
        ins: F. Stajano
        name: Frank Stajano
      -
        ins: R. Anderson
        name: Ross Anderson
    date: 1999


--- abstract

This document describes a zero-touch mechanism to enroll a new device (the "pledge")
into a IEEE802.15.4 TSCH network using the 6tisch signaling mechanisms.  The resulting
device will obtain a domain specific credential that can be used with either 802.15.9 per-host pair
keying protocols, or to obtain the network-wide key from a coordinator.  The mechanism
describe her is an augmentation to the one-touch mechanism described in {{I-D.ietf-6tisch-minimal-security}}.

--- middle

# Introduction

Enrollment of new nodes into LLNs present unique challenges.
The constrained nodes has no user interfaces, and even if they did,
configuring thousands of such nodes manually is undesireable from a human
resources issue, as well as the difficulty in getting consistent results.

This document is about a standard way to introduce new nodes into a 6tisch
network that does not involve any direct manipulation of the nodes themselves.
This act has been called "zero-touch" provisioning, and it does not occur by
chance, but requires coordination between the manufacturer of the node, the
service operator running the LLN, and the installers actually taking the
devices out of the shipping boxes.

This document is a constrained profile of {{I-D.ietf-anima-bootstrapping-keyinfra}}.  The above
document/protocol is referred by by it's acronym: BRSKI. The pronounciation of which is
"brew-ski", a common north american slang for beer with a pseudo-polish ending.

This document follows the same structure as it's parent in order to emphasize the similarities,
but specializes a number of things to constrained networks of constrained devices.
Like ANIMA's BRSKI, the networks which are in scope for this protocol are deployed by a
professional operator.  The deterministic mechanisms which have been designed into 6tisch
have been created to satisfy the operational needs of industrial settings.

This document builds upon the "one-touch" provisioning described in {{I-D.ietf-6tisch-minimal-security}},
reusing the OSCOAP Join Request mechanism when appropriate.
In addition, it uses the CoAP adaption of EST defined in {{I-D.vanderstok-ace-coap-est}}
in an identical way.


Otherwise, this document follows BRSKI with the following high-level changes:

* HTTP is replaced with CoAP.
* TLS (HTTPS) is replaced with either DTLS+CoAP, or EDHOC/OSCOAP+CoAP
* the domain-registrar anchor certificate is replaced with a Raw Public Key (RPK) using {{RFC7250}}.
* the PKCS7 signed JSON voucher format is replaced with CWT
* the GRASP discovery mechanism for the Proxy is replaced with an announcement in the Enhanced Beacon {{I-D.richardson-6tisch-join-enhanced-beacon}}
* the TCP circuit proxy mechanism is not used.  The IPIP mechanism if mandatory to implement when deployed with DTLS, while the CoAP based stateless proxy mechanism is used for OSCOAP/EDHOC.
* real time clocks are assumed to be impossible, so expiry dates in ownership vouchers are never used
* nonce-full vouchers are encouraged, but off-line nonce-less operation is also supported

802.1AR Client certificates are retained, but optionally are specified by reference rather than value.

It is expected that the back-end network operator infrastructure would be
able to bootstrap ANIMA BRSKI-type devices over ethernet, while also being able
bootstrap 6tisch devices over 802.15.4 with few changes.

NOTE TO RFC-EDITOR: during production of this document, it was matched
against {{I-D.ietf-anima-bootstrapping-keyinfra}} section by section.
This results in a few sections, such as IANA Considerations where there
is no requested activity.  Those sections are marked "NO ACTION, PLEASE REMOVE"
and should be removed (along with this paragraph) from the final document.

## Prior Bootstrapping Approaches

TBD.

## Terminology          {#Terminology}

In this document, the key words "MUST", "MUST NOT", "REQUIRED",
"SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
and "OPTIONAL" are to be interpreted as described in BCP 14, RFC 2119
{{RFC2119}} and indicate requirement levels for compliant STuPiD
implementations.

The reader is expected to be familiar with the terms and concepts defined in
{{I-D.ietf-6tisch-terminology}}, {{RFC7252}},
{{I-D.ietf-core-object-security}}, and
{{I-D.ietf-anima-bootstrapping-keyinfra}}.  The following terms are
imported: drop ship, imprint, enrollment, pledge, join proxy, ownership
voucher, join registrar/coordinator.  The following terms are repeated here for readability,
but this document is not authoritative for their definition:

pledge
:  the prospective device, which has the identity provided to
   at the factory.  Neither the device nor the network knows if the
   device yet knows if this device belongs with this network.

Joined Node
: the prospective device, after having completing the join process, often just called a Node.

Join Proxy (JP):
:  a stateless relay that provides connectivity between the pledge
   and the join registrar/coordinator.

Join Registrar/Coordinator (JRC):
:  central entity responsible for authentication and authorization of joining nodes.

Audit Token
:  A signed token from the manufacturer authorized signing
   authority indicating that the bootstrapping event has been
   successfully logged.  This has been referred to as an
   "authorization token" indicating that it authorizes bootstrapping
   to proceed.

Ownership Voucher
:  A signed voucher from the vendor vouching that a specific domain "owns"
   the new entity as defined in {{!I-D.ietf-anima-voucher}}.

MIC
:  manufacturer installed certificate. An {{ieee802-1AR}} identity. Not to be confused with a (cryptographic) "Message Integrity Check"

## Scope of solution

The solution described in this document is appropriate to enrolling between hundreds to hundreds of
thousands of diverse devices into a network without any prior contact with the devices.  The devices
could be shipped by the manufacturer directly to the customer site without ever being seen by the
operator of the network.  As described in BRSKI, in the audit-mode of operation the device will be claimed
by the first network that sees it. In the tracked owner mode of operation, sales channel integration
provides a strong connection that the operator of the network is the
legitimate owner of the device.

BRSKI describes a more general, more flexible approach for bootstrapping devices into an ISP or Enterprise
network.

{{I-D.ietf-6tisch-minimal-security}} provides an extremely streamlined approach to enrolling from
hundreds to thousands of devices into a network, provided that a unique secret key can be installed
in each device.

### Support environment

TBD

### Constrained environments

TBD

### Network Access Controls

TBD

## Leveraging the new key infrastructure / next steps

In constrained networks, it is unlikely that an ACP be formed.
This document does not preclude such a thing, but it is not mandated.

The resulting secure channel MAY be used just to distribute network-wide
keys using a protocol such as {{I-D.ietf-6tisch-minimal-security}}.
(XXX -- do we need to signal this somehow?)

The resulting secure channel MAY be instead used to do an enrollment
of an LDevID as in BRSKI, but the resulting certificate is used to do
per-pair keying such as described by {{ieee802159}.

### Key Distribution Process

In addition to being used for the initial enrollment process, the secure
channel may be kept open (and reversed) to use for network rekeying.
Such a process is out of scope of this document, please see future work such
as {{I-D.richardson-6tisch-minimal-rekey}}.

## Requirements for Autonomic Network Infrastructure (ANI) devices

TBD

# Architectural Overview

Section 2 of BRSKI has a diagram with all of the components shown together.
There are no significant changes to the diagram.

The use of a circuit proxy is not mandated. Instead the IPIP mechanism
described in appendix C ("IPIP Join Proxy mechanism") SHOULD be be used
instead as it supports both DTLS, EDHOC and OSCOAP protocols.

The CoAP proxy mechanism MAY be implemented instead: the decision depends
upon the capabilities of the Registrar and the proxy.  A mechanism is included for the
Registrar to announce it's capabilities (XXX)

## Behavior of a Pledge

The pledge goes through a series of steps which are outlined here at
a high level.


                    +--------------+
                    |   Factory    |
                    |   default    |
                    +------+-------+
                           |
                    +------v-------+
                    |  Discover    |
       +------------>              |
       |            +------+-------+
       |                   |
       |            +------v-------+
       |            |  Identity    |
       ^------------+              |
       | rejected   +------+-------+
       |                   |
       |            +------v-------+
       |            | Request      |
       |            | Join         |
       |            +------+-------+
       |                   |
       |            +------v-------+
       |            |  Imprint     |   Optional
       ^------------+              <--+Manual input (Appendix C)
       | Bad Vendor +------+-------+
       | response          |  send Voucher Status Telemetry
       |            +------v-------+
       |            |  Enroll      |
       ^------------+              |
       | Enroll     +------+-------+
       | Failure           |
       |            +------v-------+
       |            |  Enrolled    |
       ^------------+              |
        Factory     +--------------+
        reset


State descriptions for the pledge are as follows:

1.  Discover a communication channel to a Registrar.   This is done by
    listening for beacons as described by {{I-D.richardson-anima-6join-discovery}}

2.  Identify itself.  This is done by presenting an X.509 IDevID credential
    to the discovered Registrar (via the Proxy) in a DTLS or EDHOC handshake.
    (The Registrar credentials are only provisionally accepted at this time).

    The registrar identifies itself using a raw public key, while the the
    pledge identifies itself to the registrar using an IDevID credential.

3.  Requests to Join the discovered Registrar.  A unique nonce can be
    included ensuring that any responses can be associated with this
    particular bootstrapping attempt.

4.  Imprint on the Registrar.  This requires verification of the
    vendor service (MASA) provided voucher.  A voucher contains sufficient
    information for the Pledge to complete authentication of a
    Registrar.  The voucher is signed by the vendor (MASA) using a raw public
    key, previously installed into the pledge at manufacturing time.

5.  Optionally Enroll.  By accepting the domain specific information from a
       Registrar, and by obtaining a domain certificate from a Registrar
       using a standard enrollment protocol, e.g.  Enrollment over
       Secure Transport (EST) [RFC7030].

6.  The Pledge is now a member of, and can be managed by, the domain
       and will only repeat the discovery aspects of bootstrapping if it
       is returned to factory default settings.


## Secure Imprinting using Vouchers

As in BRSKI, the format and cryptographic mechansim of vouchers is described in detail
in {{I-D.ietf-anima-voucher}}.  As described in section YYY, the physical format for vouchers
in this document differs from that of BRSKI, in that it uses {{I-D.ietf-ace-cbor-web-token}}
to encode the voucher and to sign it.

## Initial Device Identifier

The essential component of the zero-touch operation is that the pledge is provisioned
with an 802.1AR (PKIX) certificate installed during the manufacturing process.

It is expected that constrained devices will use a signature algorithm corresponding to the
hardware acceleration that they have, if they have any.  The anticipated algorithms are
the ECDSA P-256 (secp256p1) as SHOULD-, while newer devices SHOLD+ begin to appear using
EdDSA curves using the 25519 curves. (EDNOTE details here)

There are a number of simplications detailed later on in this document
designed to eliminate the need for an ASN.1 parser in the pledge.

The pledge should consider it's 802.1AR certificate to be an opaque blob of
bytes, to be inserted into protocols at appropriate places.  The pledge
SHOULD have access to it's public and private keys in the most useable native
format for computation.

The pledge MUST have the public key of the MASA built in a manufacturer time.
This is a seemingly identical requirement as for BRSKI, but rather than being
an abstract trust anchor that can be augmented with a certificate chain, the
pledge MUST be provided with the Raw Public Key that the MASA will use to
sign vouchers for that pledge.

There are a number of security concerns with use of a single MASA signing
key, and section {{masaprivatekey}} addresses some of them with some
operational suggestions.

BRSKI places some clear requirements upon the contents of the IDevID, but
leaves the exact origin of the voucher serial-number open.  This document
restricts the process to being the hwSerialNum OCTET STRING.  As CWT can
handle binary formats, no base64 encoding is necessary.

The use of the MASA-URL extension is encouraged if the certificate is sent at all.

EDNOTE: here belongs text about sending only a reference to the IDevID rather
than the entire certificate

### Identification of the Pledge

TBD

### MASA URI extension

TBD

## Protocol Flow

The diagram from BRSKI is reproduced with some edits:

       +--------+         +---------+    +------------+     +------------+
       | Pledge |         | IPIP    |    | Domain     |     | Vendor     |
       |        |         | Proxy   |    | Registrar  |     | Service    |
       |        |         |         |    |            |     | (Internet  |
       +--------+         +---------+    +------------+     +------------+
         |                     |                   |                    |
         |<-RFC4862 IPv6 adr   |                   |                    |
         |                     |                   |                    |
         |<--------------------|                   |                    |
         | Enhanced Beacon     |                   |                    |
         |   periodic broadcast|                   |                    |
         |                     |                   |                    |
         |<------------------->C<----------------->|                    |
         |             DTLS via the IPIP    Proxy  |                    |
         |<--Registrar DTLS server authentication--|                    |
       [PROVISIONAL accept of server cert]         |                    |
         P---X.509 client authentication---------->|                    |
         P                     |                   |                    |
         P---Voucher Request (include nonce)------>|                    |
         P                     |                   |                    |
         P                     |                   |                    |
         P                     |              [accept device?]          |
         P                     |              [contact Vendor]          |
         P                     |                   |--Pledge ID-------->|
         P                     |                   |--Domain ID-------->|
         P                     |                   |--nonce------------>|
         P                     |                   |     [extract DomainID]
         P                     |                   |                    |
         P                     |                   |     [update audit log]
         P                     |                   |                    |
         P                     |                   |                    |
         P                     |                   |                    |
         P                     |                   |                    |
         P                     |                   |                    |
         P                     |                   |<-device audit log--|
         P                     |                   |<- voucher ---------|
         P                     |                   |                    |
         P                     |                   |                    |
         P                     |       [verify audit log and voucher]   |
         P                     |                   |                    |
         P<------voucher---------------------------|                    |
       [verify voucher ]       |                   |                    |
       [verify provisional cert|                   |                    |
         |                     |                   |                    |
         |<--------------------------------------->|                    |
         | Continue with RFC7030 enrollment        |                    |
         | using now bidirectionally authenticated |                    |
         | DTLS session.       |                   |                    |
         |                     |                   |                    |
         |                     |                   |                    |
         |                     |                   |                    |

Noteable changes are:

1. no IPv4 support/options.
2. no mDNS steps, 6tisch only uses Enhanced Beacon
3. nonce-full option is always recommended

## Architectural Components

TBD

### Pledge

   The Pledge is the device which is attempting to join.  Until the
   pledge completes the enrollment process, it has network
   connectivity only to the Proxy.

### Stateless IPIP Join Proxy

   The stateless CoAP or DTLS Proxy provides CoAP or DTLS connectivity (respectively)
   between the pledge and the registrar.  The stateless CoAP proxy mechanism is described
   in {{I-D.ietf-6tisch-minimal-security}} section 5.1.
   The stateless DTLS mechanism is not yet described (XXX).

### Domain Registrar

   The Domain Registrar (having the formal name Join Registrar/
   Coordinator (JRC)), operates as a CMC Registrar, terminating the EST
   and BRSKI connections.  The Registrar is manually configured or
   distributed with a list of trust anchors necessary to authenticate
   any Pledge device expected on the network.  The Registrar
   communicates with the Vendor supplied MASA to establish ownership.

   The JRC is typically located on the 6LBR/DODAG root, but it may be
   located elsewhere, provided IP level connectivity can be established.
   The 6LBR may also provide a proxy or relay function to connect to the
   actual registrar in addition to the IPIP proxy described above.
   The existence of such an additional proxy is a private matter, and this
   documents assumes without loss of generality that the registrar is co-located
   with the 6LBR.

### Manufacturer Service

   The Manufacturer Service provides two logically seperate functions: the
   Manufacturer Authorized Signing Authority (MASA), and an ownership
   tracking/auditing function.
   This function is identical to that used by BRSKI, except that
   a different format voucher is used.

### Public Key Infrastructure (PKI)

TBD


## Certificate Time Validation

### Lack of realtime clock

For the constrained situation it is assumed that devices have no real time clock.
These nodes do have access to a monotonically increasing clock that will not go backwards
in the form of the Absolute Sequence Number.   Synchronization to the ASN is required in
order to transmit/receive data and most nodes will maintain it in hardware.

The heuristic described in BRSKI under this section SHOULD be applied if there
are dates in the CWT format voucher.

Voucher requests SHOULD include a nonce.  For devices intended for off-line deployment,
the vouchers will have been generated in advance and no nonce-ful operation will not be
possible.

### Infinite Lifetime of IDevID

TBD

## Cloud Registrar

In 6tisch, the pledge never has network connectivity until it is enrolled,
so no alternate registrar is ever possible.

## Determining the MASA to contact

There are no changes from BRSKI: the IDevID provided by the pledge will contain a MASA URL
extension.

# Voucher-Request artifact

As in BRSKI, a voucher-request artifact is derived from the base voucher definition.
The constrained version differs from the non-constrained version in two ways:

1. it does not include the pinned-domain-cert, but rather than pinned-domain-subjet-public-key-info entry.  This accomodates the use of a raw public key to identify the registrar.

2. the pledge voucher-request is never signed.

An appendix shows detailed examples of CWT format voucher requests.

## Tree Diagram

<figure>
INSERT_TEXT_FROM_FILE ietf-cwt-voucher-request-tree.txt END
</figure>

## SID values

This definition, translated via the rules in {{I-D.ietf-core-yang-cbor}}
to a list of SID values:

<figure>
INSERT_TEXT_FROM_FILE yang/ietf-cwt-voucher-request.sid.txt END
</figure>

## YANG Module

<figure>
INSERT_TEXT_FROM_FILE ietf-cwt-voucher-request.yang END
</figure>

# Proxying details (Pledge - Proxy - Registrar)

The role of the Proxy is to facilitate communication.
In the constrained situation the proxy needs to be stateless.

## Pledge discovery of Proxy

In BRSKI, the pledge discovers the proxy via use of a GRASP M_FLOOD messages
sent by the proxy.  In 6tisch-zero-touch, the existence of the proxy is related
by the Enhanced Beacon.

## CoAP connection to Registrar

In BRSKI CoAP is future work.  This document represents this work.

## HTTPS proxy connection to Registrar

HTTPS connections are not used.

## Proxy discovery of Registrar

In BRSKI, the proxy autonomically discovers the Registrar by listening for GRASP messages.
In the constrained network, the proxies are optionally configured with the address of the
registrar by the Join Response in {{I-D.ietf-6tisch-minimal-security}} section XX.
The address of the registrar otherwise defaults to be that of the DODAG root.

# Protocol Details (Pledge - Registrar - MASA)

BRSKI is specified to run over HTTPS. This document respecifies it to run over CoAP with
either DTLS or EDHOC-provided OSCOAP security.  There is an emerging (hybrid) possibility
of DTLS-providing the OSCOAP security, but such a specification does not yet exist.

{{I-D.vanderstok-ace-coap-est}} specifies that CoAP specifies
the use of CoAP Block-Wise Transfer ("Block") {{!RFC7959}} to fragment EST messages at the
application layer.

BRSKI introduces the concept of a provisional state for EST. The same situation
must also be added to DTLS: a situation where the connection is active but the identity of
the Registar has not yet been confirmed.  The DTLS MUST validate that the exchange has
been signed by the Raw Public Key that is presented by the Server, even though there is
as yet no trust in that key.  Such a key is often available through APIs that provide for
channel binding, such as described in {{RFC5056}}.

As in {{I-D.vanderstok-ace-coap-est}}, support for Observe CoAP options {{RFC7641}} with
BRSKI is not supported in the current BRSKI/EST message flows.
Observe options could be used by the server to notify clients about a change in the cacerts
or csr  attributes (resources) and might be an area of future work.

Redirection as described in {{RFC7030}} section 3.2.1 is NOT supported.

## BRSKI-EST (D)TLS establishment details

Zerotouch Join does not use TLS.  The connection is either CoAP over DTLS,
or CoAP with EDHOC security.

### BRSKI-EST CoAP/DTLS estasblishment details

The details in the BRSKI document apply directly to use of DTLS.

The registrar SHOULD authenticate itself with a raw public key.

The pledge SHOULD authenticate itself with the built-in IDevID certificate.

### BRSKI-EST CoAP/EDHOC estasblishment details

{{I-D.ietf-6tisch-minimal-security}} section YYY details how to setup EDHOC.

The registrar SHOULD authenticate itself with a raw public key.

The pledge SHOULD authenticate itself with the built-in IDevID certificate.

## Pledge Requests Voucher from the Registrar

The voucher request and response as defined by BRSKI is modified slightly.

In order to simplify the pledge, the use of a certificate (and chain) for the
Registrar is not supported.  Instead the newly
defined pinned-domain-subject-public-key-info must contain the (raw) public key
info for the Registrar.  It MUST be byte for byte identical to that
which is transmitted by the Registrar during the TLS ServerCertificate handshake.

BRSKI permits the voucher request to be signed or unsigned.  This document defines the
voucher request to be unsigned.

## BRSKI-MASA TLS establishment details

There are no changes.  The connection from the Registrar to MASA is still HTTPS.

## Registrar Requests Voucher from MASA

There are no change from BRSKI, as this step is between two non-constrained devices.
The format of the voucher is CWT, which implies changes to both the Registrar and the MASA,
but semantically the content is the same.

The manufacturer will know what algorithms are supported by the pledge, and will issue
a 406 (Conflict) error to the Registrar if the Registar's public key format is not
supported by the pledge.

### MASA voucher activities

TBD

## MASA and Registrar Voucher Response

The format of the voucher is CWT as described in CWT RFC section YYY.

#### Tree Diagram

<figure>
INSERT_TEXT_FROM_FILE ietf-cwt-voucher-tree.txt END
</figure>

#### SID values

This definition, translated via the rules in {{I-D.ietf-core-yang-cbor}}
to a list of SID values:

<figure>
INSERT_TEXT_FROM_FILE yang/ietf-cwt-voucher.sid.txt END
</figure>

#### YANG Module

<figure>
INSERT_TEXT_FROM_FILE ietf-cwt-voucher.yang END
</figure>

### Pledge authentication of provisional TLS connection

The BRSKI process uses the pinned-domain-cert field of the voucher to
validate the registrar's ServerCertificate.  In the ZeroTouch case, the
voucher will contain a pinned-domain-subject-public-key-info field containing
the raw public key of the certificate.  It should match, byte-to-byte
with the raw public key ServerCertificate.

## Pledge Voucher Status Telemetry

The voucher status telemetry report is communicated from the pledge to
the registrar over CoAP channel.  The shortened URL is as described in table QQQ.

## Registrar audit log request

There are no changes to the Registrar audit log request.

### MASA audit log response

There are no changes to the MASA audit log response.

### Registrar audit log verification

There are no changes to how the Registrar verifies the audit log.


## EST Integration for PKI bootstrapping

TBD.

### EST Distribution of CA Certificates

TBD.

### EST CSR Attributes

TBD.

### EST Client Certificate Request

TBD.

### Enrollment Status Telemetry

There are no changes to the status telemetry between Registrar and MASA.

### Multiple certificates

### EST over CoAP

This document and {{I-D.vanderstok-ace-coap-est}} detail how to run EST over CoAP.

# Reduced security operational modes

TBD

## Trust Model

TBD

## Pledge security reductions

TBD

## Registrar security reductions

TBD

## MASA security reductions

TBD

# IANA Considerations

XXX

## Well-known EST registration

XXX

## PKIX Registry

TBD

## Voucher Status Telemetry

TBD

## DNS Service Names

TBD

## MUD File Extension for the MASA server

TBD

# Privacy Considerations

{{I-D.ietf-6lo-privacy-considerations}} details a number of privacy
considerations important in Resource Constrained nodes.  There are two
networks and three sets of constrained nodes to consider. They are:
1. the production nodes on the production network.
2. the new pledges, which have yet to enroll, and which are on a join
network.
3. the production nodes which are also acting as proxy nodes.

## Privacy Considerations for Production network

The details of this are out of scope for this document.

## Privacy Considerations for New Pledges

New Pledges do not yet receive Router Advertisements with PIO options, and so
configure link-local addresses only based upon layer-2 addresses using the
normal SLAAC mechanisms described in {{RFC4191}}.

These link-local addresses are visible to any on-link eavesdropper (who is
synchronized to the same Join Assistant), so regardless of what is chosen
they can be seen.  This link-layer traffic is encapsulated by the Join
Proxy into IPIP packets and carried to the JRC.  The traffic SHOULD never
leave the operator's network, will be kept confidential by the layer-2 keys
inside the LLN.   As no outside traffic can enter the join network,
to do any ICMP scanning as described in {{I-D.ietf-6lo-privacy-considerations}}.

The join process described herein requires that some identifier meaningful to
the network operator be communicated to the JRC.  The join request with this
object occurs within a secured CoAP channel, although the link-local address configured
by the pledge will be visible in either the CoAP stateless proxy option
(section 5.1 of {{I-D.ietf-6tisch-minimal-security}}), or in the equivalent
DTLS stateless proxy option (reference TBD).

This need not be a manufacturer created EUI-64 as assigned by IEEE; it could be another
value with higher entropy and less interesting vendor/device information.
Regardless of what is chosen, it can be used to track where the device attaches.

For most constrained device, network attachment occurs very infrequently,
often only once in their lifetime, so tracking opportunities may be rare.
Once connected, the long 8-byte EUI64 layer-2 address is usually replaced with a short
JRC assigned 2-byte address.

Additionally, during the enrollment process, a DTLS connection or EDHOC
connection will be created.  TLS1.3 will keep contents of the certificates transmitted
private while TLS 1.2 will not.  If the client certificate can be observed,
then the device identity will be visible to passive observers in the 802.11AR IDevID
certificate that is sent.

Even when TLS 1.3 is used, an active attacker could collect the information by
creating a rogue proxy.

The use of a manufacturer assigned EUI64 (whether derived from IEEE assignment or
created through another process during manufacturing time) is encouraged.

### EUI-64 derived address for join time IID

The IID used in the link-local address used during the join process be a
vendor assigned EUI-64.  After the join process has concluded, the device
SHOULD be assigned a unique randomly generated long address, and a
unique short address (not based upon the vendor EUI-64) for use at link-layer address.
At that point, all layer-3 content is encrypted by the layer-2 key.

## Privacy Considerations for Join Proxy

TBD.

# Security Considerations

TBD

## Security of MASA voucher signing key(s) {#masaprivatekey}

TBD

# Acknowledgements

Kristofer Pister helped with many non-IETF references.


--- back

# Extra text

The following text is from previous versions of this document.
The document has been re-organized to match the flow
of {{I-D.ietf-anima-bootstrapping-keyinfra}}.

## Assumptions

### One-Touch Assumptions

This document interacts with the one-touch solution
described in {{I-D.ietf-6tisch-minimal-security}}.

### Factory provided credentials (if any)

When a manufacturer installed certificate is provided as the IDevID, it
SHOULD contain a number of fields.  {{I-D.ietf-anima-bootstrapping-keyinfra}}
provides a detailed set of requirements.

A manufacturer unique serial number MUST be provided in the serialNumber
SubjectAltName extension, and MAY be repeated in the Common Name. There are
no sequential or numeric requirements on the serialNumber, it may be any
unique value that the manufacturer wants to use.  The serialNumber SHOULD be
printed on the packaging and/or on the device in a discrete way so that failures
can be physically traced to the relevant device.

### Credentials to be introduced

The goal of the bootstrap process is to introduce one or more new locally
relevant credentials:

1. a certificate signed by a local certificate authority/registrar. This is
   the LDevID of {{ieee802-1AR}}.
2. alternatively, a network-wide key to be used to secure L2 traffic.
3. alternatively, a network-wide key to be used to authenticate per-peer
   keying of L2 traffic using a mechanism such as provided by {{ieee802159}}.

## Network Assumptions

This document is about enrollment of constrained devices {{RFC7228}} to a
constrained network.  Constrained networks is such as {{ieee802154}}, and in
particular the time-slotted, channel hopping (tsch) mode, feature low
bandwidths, and limited opportunities to transmit.  A key feature of these
networks is that receivers are only listening at certain times.

### Security above and below IP

802.15.4 networks have three kinds of layer-2 security:

* a network key that is shared with all nodes and is used for unicast and multicast.  The key may be used for privacy, and it may be used in some cases for authentication only (in the case of enhanced beacons).
* a series of network keys that are shared (agreed to) between pairs of nodes (the per-peer key)
* a network key that is shared with all nodes (through a group key management system), and is used for multicast traffic only, while a per-pair key is used for unicast traffic

Setting up the credentials to bootstrap one of these kinds of security,
(or directly configuring the key itself for the first case) is required.
This is the security below the IP layer.

Security is required above the IP layer: there are three aspects which the
credentials in the previous section are to be used.

* to provide for secure connection with a Path Computation Element {{RFC4655}}, or other LLC (see ({RFC7554}} section 3).

* to initiate a connection between a Resource Server (RS) and an application layer Authorization Server (AS and CAS from {{I-D.ietf-ace-actors}}).


#### Perfect Forward Secrecy

Perfert Forward Secrecy (PFS) is the property of a protocol such that complete
knowledge of the crypto state (for instance, via a memory dump) at
time X does not imply that data from a disjoint time Y can also be recovered.
({{PFS}}).

PFS is important for two reasons: one is that it offers protection against
the compromise of a node.  It does this by changing the keys in a
non-deterministic way. This second property also makes it much easier to
remove a node from the network, as any node which has not participated in
the key changing process will find itself no longer connected.

### Join network assumptions

The network which the new pledge will connect to will have to have the following properties:

* a known PANID.  The PANID 0xXXXX where XXXX is the assigned RFC# for this document is suggested.
* a minimal schedule with some Aloha time.  This is usually in the same slotframe as the Enhanced Beacon, but a pledge MUST listen for an unencrypted Enhanced Beacon to so that it can synchronize.

### Number and cost of round trips

TBD.

### Size of packets, number of fragments

TBD

## Target end-state for join process

At the end of the zero-touch join process there will be a symmetric key protected channel
between the Join Registrar/Coordinator and the pledge, now known as a Joined Node.  This
channel may be rekeyed via new exchange of asymmetric exponents (ECDH for instance), authenticated
using the domain specific credentials created during the join process.

This channel is in the form of an OSCOAP protected connection with {{I-D.ietf-core-comi}} encoded objects.
This document includes definition of a {{I-D.ietf-netconf-keystore}} compatible objects for
encoding of the relevant {{I-D.ietf-anima-bootstrapping-keyinfra}} objects.

# Join Protocol

The pledge join protocol state machine is described in {{I-D.ietf-6tisch-minimal-security}},
in section XYZ.  The pledge recognizes that it is in zero-touch configuration by the following
situation:

* no PSK has been configured for the network in which it has joined.
* the pledge has no locally defined certificate (no LDevID), only an IDevID.
* the network asserts an identity that the pledge does not recognize.

All of these conditions MUST be true.  If any of these are not true, then the pledge has either been
connected to the wrong network, or it has already been bootstrapped into a
different network, and it should wait until it finds that network.

The zero-touch process consists of three stages:

1. the key agreement process
2. the provisional enrollment process
3. the key distribution process

## Key Agreement process

The key agreement process is identical to {{I-D.ietf-6tisch-minimal-security}}.
The process uses EDHOC with certificates.

The pledge will have to trust the JRC provisionally, as described
in {{I-D.ietf-anima-bootstrapping-keyinfra}}, section 3.1.2, and
in section 4.1.1 of {{RFC7030}}.

The JRC will be able to validate the IDevID of the pledge using the
manufacturer's CA.

The pledge may not know if it is in a zero-touch or one-touch situation: the
pledge may be able to verify the JRC based upon trust anchors that were
installed at manufacturing time.  In that case, the pledge runs the
simplified one-touch process.

The pledge signals in the EDHOC message_2 if it has accepted the JRC
certificate.  The JRC will in general, not trust the pledge with the network
keys until it has provided the pledge with a voucher.  The pledge will notice
the absence of the provisioning keys.

XXX - there could be some disconnect here.  May need additional signals here.

## Provisional Enrollment process

When the pledge determines that it can not verify the certificate of the JRC
using built-in trust anchors, then it enters a provisional state.  In this
state, it keeps the channel created by EDHOC open.

A new EDHOC key derivation is done by the JRC and pledge using a new label,
"6tisch-provisional".

The pledge runs as a passive CoMI server, leaving the JRC to drive the
enrollment process.   The JRC can interrogate the pledge in a variety of
fashions as shown below: the process terminates when the JRC provides
the pledge with an ownership voucher and the pledge leaves the provisional
state.

A typical interaction involves the following requests:

~~~~~~~~
    +-----------+ +----------+ +-----------+ +----------+
    |           | |          | | Circuit   | | New      |
    |  Vendor   | | Registrar| |  Proxy    | | Entity   |
    |  (MASA)   | |          | |           | |          |
    ++----------+ +--+-------+ +-----------+ +----------+
     |               |     GET  request voucher       |
     |               |-------------------------------->
     |               <----------voucher-token---------|
     |/requestvoucher|                                |
     <---------------+                                |
     +--------------->                                |
     |/requestlog    |                                |
     <---------------+                                |
     +--------------->                                |
     |               |        POST voucher            |
     |               |-------------------------------->
     |               <------------2.05 OK ------------+
     |               |                                |
     |               |        POST csr attributes     |
     |               |-------------------------------->
     |               <------------2.05 OK ------------+
     |               |                                |
     |               |        GET  cert request       |
     |               |-------------------------------->
     |     ????      <------------2.05 OK ------------+
     |<--------------|              CSR               |
     |-------------->|                                |
     |               |        POST certificate        |
     |               |-------------------------------->
     |               <------------2.05 OK ------------+
     |               |                                |
~~~~~~~~



# IANA Considerations

This document allocates one value from the subregistry "Address Registration
Option Status Values":
     ND_NS_JOIN_DECLINED  Join Assistant, JOIN DECLINED   (TBD-AA)



# Protocol Definition

## Discovery

Only IPv6 operations using Link-Local addresses are supported.
Use of a temporary address is NOT encouraged as the critial resource on the
Proxy device is the number of Neighbour Cache Entries that can be used for
untrusted pledge entries.

### Proxy Discovery Protocol Details

The Proxy is discovered using the enhanced beacon defined in {{I-D.richardson-6tisch-join-enhanced-beacon}}.

### Registrar Discovery Protocol Details

The Registrar is not discovered by the Proxy.  Any device that is expected to be able to operate
as a Registrar MAY be told the address of the Registrar when that device joins the network.
The address MAY be included in the {{I-D.ietf-6tisch-minimal-security}} Join Response.
If the address is NOT included, then Proxy may assume that the Registrar can be found at the
DODAG root, which is well known in the 6tisch's use of the RPL protocol.


--- fluff

<!--- Local variables: --->
<!--- mode: markdown --->
<!--- End: --->
